// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package jamcommons.actions;

import java.util.HashSet;
import java.util.NoSuchElementException;
import java.util.Set;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;

public class ExecuteMicroflowWithoutModuleName extends CustomJavaAction<java.lang.Boolean>
{
	private java.lang.String microflowName;

	public ExecuteMicroflowWithoutModuleName(IContext context, java.lang.String microflowName)
	{
		super(context);
		this.microflowName = microflowName;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE

		Set<String> modules = new HashSet<String>();
		for (String name : Core.getMicroflowNames()) {
			String[] splitted = name.split("\\.");
			if (splitted.length > 0) {
				modules.add(splitted[0]);
			}
		}

		for (String module : modules) {
			try {
				String flowName = module + "." + microflowName;
				Object result = Core.microflowCall(flowName).execute(this.getContext());
				if (result instanceof Boolean) {
					return (Boolean) result;
				}
			} catch (Exception e) {
				if (!(e.getCause() instanceof NoSuchElementException)) { // NoSuchElementException is thrown if startup flow is not found
					throw e;
				}
			}
		}
		return false;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ExecuteMicroflowWithoutModuleName";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
