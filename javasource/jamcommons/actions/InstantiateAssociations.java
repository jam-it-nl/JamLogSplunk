// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package jamcommons.actions;

import java.util.ArrayList;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.core.objectmanagement.member.MendixObjectReference;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;

/**
 * Instantiate (and commit) every 1 to 1 association while walking the tree starting at the provided object.
 */
public class InstantiateAssociations extends CustomJavaAction<java.lang.Void>
{
	private IMendixObject anyObject;

	public InstantiateAssociations(IContext context, IMendixObject anyObject)
	{
		super(context);
		this.anyObject = anyObject;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		// BEGIN USER CODE
		instantiateRelationObjects(this.anyObject, new ArrayList<IMendixIdentifier>());
		return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "InstantiateAssociations";
	}

	// BEGIN EXTRA CODE
	private void instantiateRelationObjects(IMendixObject mendixObject, ArrayList<IMendixIdentifier> visited) throws CoreException {
		if (visited.contains(mendixObject.getId())) {
			return;
		}
		visited.add(mendixObject.getId());
		for (MendixObjectReference reference : mendixObject.getReferences(getContext())) {
			// Every 1 on 1 relation
			if (this.isRelationAccepted(reference) && reference.isBoth()) {
				IMendixIdentifier mendixIdentifier = reference.getValue(getContext());
				IMendixObject relationObject = null;
				if (mendixIdentifier == null) {
					relationObject = Core.instantiate(getContext(), reference.referenceType());
					reference.setValue(getContext(), relationObject.getId());
					Core.commit(getContext(), relationObject);
					Core.commit(getContext(), mendixObject);
				} else {
					relationObject = this.getMendixObject(getContext(), mendixObject, reference);
				}
				instantiateRelationObjects(relationObject, visited);
			}
		}
	}

	private boolean isRelationAccepted(MendixObjectReference references) {
		return !references.getName().startsWith("System.");
	}

	private IMendixObject getMendixObject(IContext context, IMendixObject mendixObject, MendixObjectReference reference) throws CoreException {
		// mendixIdentifier.getObject() seems to be able to return an old version of the
		// object if there was a commit
		IMendixIdentifier mendixIdentifier = reference.getValue(context);
		if (mendixIdentifier == null) {
			return null;
		}

		IMendixObject result = Core.retrieveId(context, mendixIdentifier);
		if (result != null) {
			return result;
		}

		java.util.List<IMendixObject> mxObjects = Core.retrieveXPathQuery(context, "//" + reference.referenceType() + "[id=" + mendixIdentifier.toLong() + "]");

		if (mxObjects.size() == 0) {
			return null;
		} else if (mxObjects.size() == 1) {
			return mxObjects.get(0);
		} else {
			throw new IllegalArgumentException("More then one object is found for id: " + mendixIdentifier.toLong());
		}
	}
	// END EXTRA CODE
}
