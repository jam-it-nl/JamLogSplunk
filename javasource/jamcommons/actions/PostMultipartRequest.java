// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package jamcommons.actions;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.io.IOUtils;
import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.entity.mime.content.InputStreamBody;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicHeader;
import org.apache.http.util.EntityUtils;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import nl.jam.mendix.library.lib.http.HttpResponse;

public class PostMultipartRequest extends CustomJavaAction<java.lang.String>
{
	private java.lang.String url;
	private java.lang.String partname;
	private IMendixObject __file;
	private system.proxies.FileDocument file;
	private java.lang.String filename;
	private java.util.List<IMendixObject> __headers;
	private java.util.List<system.proxies.HttpHeader> headers;
	private IMendixObject __targetFile;
	private system.proxies.FileDocument targetFile;

	public PostMultipartRequest(IContext context, java.lang.String url, java.lang.String partname, IMendixObject file, java.lang.String filename, java.util.List<IMendixObject> headers, IMendixObject targetFile)
	{
		super(context);
		this.url = url;
		this.partname = partname;
		this.__file = file;
		this.filename = filename;
		this.__headers = headers;
		this.__targetFile = targetFile;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		this.file = __file == null ? null : system.proxies.FileDocument.initialize(getContext(), __file);

		this.headers = new java.util.ArrayList<system.proxies.HttpHeader>();
		if (__headers != null)
			for (IMendixObject __headersElement : __headers)
				this.headers.add(system.proxies.HttpHeader.initialize(getContext(), __headersElement));

		this.targetFile = __targetFile == null ? null : system.proxies.FileDocument.initialize(getContext(), __targetFile);

		// BEGIN USER CODE
		List<Header> headerList = new ArrayList<Header>();
		if (this.headers != null) {
			for (system.proxies.HttpHeader httpHeader : this.headers) {
				headerList.add(new BasicHeader(httpHeader.getKey(), httpHeader.getValue()));
			}
		}

		ByteArrayOutputStream target = new ByteArrayOutputStream();
		InputStream fileDocumentContent = Core.getFileDocumentContent(getContext(), this.file.getMendixObject());

		HttpResponse response = this.doRequest(this.url, this.partname, fileDocumentContent, this.file.getName(), headerList, target);

		if (this.targetFile != null) {
			Core.storeFileDocumentContent(getContext(), this.targetFile.getMendixObject(), new ByteArrayInputStream(target.toByteArray()));
		}
		return response.getContent();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "PostMultipartRequest";
	}

	// BEGIN EXTRA CODE
	public HttpResponse doRequest(String url, String partname, InputStream file, String filename, List<Header> headers, OutputStream outputStream) {
		CloseableHttpClient httpclient = HttpClients.createDefault();
		try {
			HttpPost httppost = new HttpPost(url);

			if (headers != null) {
				for (Header header : headers) {
					httppost.addHeader(header);
				}
			}

			InputStreamBody inputStreamBody = new InputStreamBody(file, filename);
			HttpEntity reqEntity = MultipartEntityBuilder.create().addPart(partname, inputStreamBody).build();
			httppost.setEntity(reqEntity);

			try (CloseableHttpResponse response = httpclient.execute(httppost)) {

				int statusCode = response.getStatusLine().getStatusCode();
				if (statusCode < 200 || statusCode >= 300) {
					throw new RuntimeException("Received statuscode: " + statusCode);
				}

				HttpResponse httpResponse = new HttpResponse();
				HttpEntity httpEntity = response.getEntity();

				if (httpEntity != null) {

					if (httpEntity.isStreaming()) {
						InputStream inputStream = httpEntity.getContent();
						if (inputStream != null) {

							ContentType contentType = ContentType.get(httpEntity);
							String mimeType = contentType == null ? "" : contentType.getMimeType();
							if (mimeType.equals(ContentType.APPLICATION_JSON.getMimeType())) {
								StringWriter writer = new StringWriter();
								IOUtils.copy(inputStream, writer, "UTF-8");
								httpResponse.setContent(writer.toString());
							} else {
								IOUtils.copy(inputStream, outputStream);
							}
						}
					}
					EntityUtils.consume(httpEntity);
				}
				return httpResponse;
			} catch (IOException e) {
				throw new IllegalArgumentException(e.getMessage(), e);
			}
		} finally {
			try {
				httpclient.close();
			} catch (IOException e) {
				throw new IllegalArgumentException(e.getMessage(), e);
			}
		}
	}

	// END EXTRA CODE
}
